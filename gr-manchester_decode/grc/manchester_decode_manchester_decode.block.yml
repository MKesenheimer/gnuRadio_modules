id: manchester_decode
label: Manchester decode
flags: [python, cpp]
category: '[Symbol Coding]'

templates:
  imports: import manchester_decode
  make: manchester_decode.manchester_decode(${samples_per_symbol}, ${nsync_symbols}, ${bit_mode}, ${endianess})

parameters:
- id: samples_per_symbol
  label: samples per symbol
  dtype: int
  default: '4'
- id: nsync_symbols
  label: number of syncing symbols
  dtype: int
  default: '0'
- id: bit_mode
  label: bit mode
  dtype: int
  default: '0'
- id: endianess
  label: endianess
  dtype: int
  default: '0'

inputs:
- label: in
  domain: stream
  dtype: [float, int, short]

outputs:
- label: out
  domain: stream
  dtype: byte

asserts:
- ${ samples_per_symbol > 1 }
- ${ nsync_symbols >= 0 }
- ${ bit_mode == 0 or bit_mode == 1}
- ${ endianess == 0 or endianess == 1}

#cpp_templates:
#    includes: ['#include <gnuradio/blocks/min_blk.h>']
#    declarations: 'blocks::min_${type.fcn}::sptr ${id};'
#    make: 'this->${id} = blocks::min_${type.fcn}::make(${vlen},${vlen_out});'

file_format: 1
